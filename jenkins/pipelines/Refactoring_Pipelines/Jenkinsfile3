pipeline {
    agent any

    parameters {
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this a Release Candidate?')
    }

    environment {
        RELEASE_VERSION = '1.6.7'
        INT_VERSION = 'R2'
    }
    stages {
        stage('Audit tools') {
            steps {
                sh '''
                  git version
                  java -version
                  mvn -version
                '''
            }
        }

        stage('Unit Test') {
            steps {
                dir('./jenkins/java-tomcat-sample') {
                    sh '''
                        echo "Executing Unit Tests..."
                        mvn test
                    '''
                }
            }
        }

        stage('Build') {
            environment {
                VERSION_SUFFIX = "${sh(script:'if [ "${RELEASE}" = false ] ; then echo -n "${INT_VERSION}"ci:"${BUILD_NUMBER}"; else echo -n "${RELEASE_VERSION}":"${BUILD_NUMBER}"; fi', returnStdout: true)}"
            }
            steps {
                // check if params is being passed in (true or false for release)
                echo "Building version: ${INT_VERSION} with suffix: ${VERSION_SUFFIX}"
                echo 'Mention your Application Build Code here!!!'
                dir('./jenkins/java-tomcat-sample') {
                        sh '''
                            mvn versions:set -DnewVersion="${VERSION_SUFFIX}"-SNAPSHOT
                            mvn versions:update-child-modules
                            mvn clean package
                        '''
                }
            }
        }

        stage('Publish') {
            // when release param is true -> Publish stage to archive artifacts will execute
            // else will skip this stage
            when {
                expression { return params.RELEASE }
            }

            steps {
                // publish specific artifact war file
                archiveArtifacts('**/*.war')
            }
        }
    }

    post {
        always {
            // cleanup the jenkins node workspace of all the files
            cleanWs()
        }
    }
}